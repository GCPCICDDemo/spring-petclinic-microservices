# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - 'feature-*'
      - 'release-*'
      - 'hotfix-*'
  pull_request:
    branches:
      - main
      - 'release-*'

env:
  GCP_REGION: asia-northeast1
  GCP_PROJECT_ID: demoforgaudiy
  ARTIFACT_REGISTRY: maven

jobs:
  INIT:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [ '17' ]
    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK ${{matrix.java}}
      uses: actions/setup-java@v2
      with:
        java-version: ${{matrix.java}}
        distribution: 'adopt'
        cache: maven

  feature-branch-pipeline:
    if: startsWith(github.ref, 'refs/heads/feature-')
    needs: INIT
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt'
          cache: maven

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker $GCP_REGION-docker.pkg.dev

      - name: SonarQube Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: "http://sonar.cicd.tagarsoft.com/"
        run: |
          docker run \
            --rm \
            -e SONAR_HOST_URL="${SONAR_HOST_URL}" \
            -e SONAR_LOGIN="${SONAR_TOKEN}" \
            -v "${PWD}:/usr/src" \
            sonarsource/sonar-scanner-cli \
            -Dsonar.projectKey=PetApp \
            -Dsonar.organization=GCPCICDDemo \
            -Dsonar.sources=. \
            -Dsonar.java.binaries=target/classes

      - name: Check SonarQube Quality Gate
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: "http://sonar.cicd.tagarsoft.com/"
        run: |
          quality_gate_status=$(curl -s -u ${SONAR_TOKEN}: "${SONAR_HOST_URL}/api/qualitygates/project_status?projectKey=PetApp" | jq -r '.projectStatus.status')
          if [ "$quality_gate_status" != "OK" ]; then
            echo "SonarQube Quality Gate failed. Aborting pipeline."
            exit 1
          fi

      - name: Run Unit Tests
        run: mvn test -s .mvn/settings.xml

      - name: Build Docker Images
        run: |
          ./mvnw spring-boot:build-image -s .mvn/settings.xml \
          -Dspring-boot.build-image.imageName=$GCP_REGION-docker.pkg.dev/$GCP_PROJECT_ID/$ARTIFACT_REGISTRY/spring-petclinic-microservices \
          -Dspring-boot.build-image.pullPolicy=IF_NOT_PRESENT

      - name: Run Trivy vulnerability scanner
        id: trivy
        continue-on-error: true
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY }}/spring-petclinic-microservices'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      - name: Check commit message for skip flag
        id: check_commit
        run: |
          commit_message=$(git log --format=%B -n 1 ${{ github.sha }})
          if [[ $commit_message == *"skipVulnerabilityResult"* ]]; then
            echo "::set-output name=skip_vuln::true"
          else
            echo "::set-output name=skip_vuln::false"
          fi

      - name: Fail if vulnerabilities found and not skipped
        if: steps.trivy.outcome == 'failure' && steps.check_commit.outputs.skip_vuln != 'true'
        run: |
          echo "Vulnerabilities found and not skipped. Failing the pipeline."
          exit 1

      - name: Push Docker images
        if: success() || steps.check_commit.outputs.skip_vuln == 'true'
        run: |
          docker push $GCP_REGION-docker.pkg.dev/$GCP_PROJECT_ID/$ARTIFACT_REGISTRY/spring-petclinic-microservices-config-server
          docker push $GCP_REGION-docker.pkg.dev/$GCP_PROJECT_ID/$ARTIFACT_REGISTRY/spring-petclinic-microservices-discovery-server
          docker push $GCP_REGION-docker.pkg.dev/$GCP_PROJECT_ID/$ARTIFACT_REGISTRY/spring-petclinic-microservices-api-gateway
          docker push $GCP_REGION-docker.pkg.dev/$GCP_PROJECT_ID/$ARTIFACT_REGISTRY/spring-petclinic-microservices-customers-service
          docker push $GCP_REGION-docker.pkg.dev/$GCP_PROJECT_ID/$ARTIFACT_REGISTRY/spring-petclinic-microservices-visits-service
          docker push $GCP_REGION-docker.pkg.dev/$GCP_PROJECT_ID/$ARTIFACT_REGISTRY/spring-petclinic-microservices-vets-service
          docker push $GCP_REGION-docker.pkg.dev/$GCP_PROJECT_ID/$ARTIFACT_REGISTRY/spring-petclinic-microservices-admin-server

      - name: Push to Feature Branch
        if: success() || steps.check_commit.outputs.skip_vuln == 'true'
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git push origin HEAD:${{ github.ref }}

  # Add other branch pipelines (release, main, hotfix) as needed
